directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type BoardMeeting implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  meetingDate: Time!
  announcementDate: Time!
  purpose: String!
  description: String!
  attachment: String!
  stock: Stock
}
"""
BoardMeetingWhereInput is used for filtering BoardMeeting objects.
Input was generated by ent.
"""
input BoardMeetingWhereInput {
  not: BoardMeetingWhereInput
  and: [BoardMeetingWhereInput!]
  or: [BoardMeetingWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  meeting_date field predicates
  """
  meetingDate: Time
  meetingDateNEQ: Time
  meetingDateIn: [Time!]
  meetingDateNotIn: [Time!]
  meetingDateGT: Time
  meetingDateGTE: Time
  meetingDateLT: Time
  meetingDateLTE: Time
  """
  announcement_date field predicates
  """
  announcementDate: Time
  announcementDateNEQ: Time
  announcementDateIn: [Time!]
  announcementDateNotIn: [Time!]
  announcementDateGT: Time
  announcementDateGTE: Time
  announcementDateLT: Time
  announcementDateLTE: Time
  """
  purpose field predicates
  """
  purpose: String
  purposeNEQ: String
  purposeIn: [String!]
  purposeNotIn: [String!]
  purposeGT: String
  purposeGTE: String
  purposeLT: String
  purposeLTE: String
  purposeContains: String
  purposeHasPrefix: String
  purposeHasSuffix: String
  purposeEqualFold: String
  purposeContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  attachment field predicates
  """
  attachment: String
  attachmentNEQ: String
  attachmentIn: [String!]
  attachmentNotIn: [String!]
  attachmentGT: String
  attachmentGTE: String
  attachmentLT: String
  attachmentLTE: String
  attachmentContains: String
  attachmentHasPrefix: String
  attachmentHasSuffix: String
  attachmentEqualFold: String
  attachmentContainsFold: String
  """
  stock edge predicates
  """
  hasStock: Boolean
  hasStockWith: [StockWhereInput!]
}
"""
CreateBoardMeetingInput is used for create BoardMeeting object.
Input was generated by ent.
"""
input CreateBoardMeetingInput {
  createdAt: Time
  updatedAt: Time
  meetingDate: Time!
  announcementDate: Time!
  purpose: String
  description: String
  attachment: String
  stockID: ID
}
"""
CreateNewsInput is used for create News object.
Input was generated by ent.
"""
input CreateNewsInput {
  createdAt: Time
  updatedAt: Time
  publishedAt: Time
  title: String!
  description: String
  url: String!
  imageURL: String!
  content: String
  source: String
  stocks: [String!]
  isAnalyzed: Boolean
}
"""
CreateNotificationInput is used for create Notification object.
Input was generated by ent.
"""
input CreateNotificationInput {
  createdAt: Time
  updatedAt: Time
  title: String!
  description: String
  isRead: Boolean
  userID: ID
}
"""
CreatePortfolioInput is used for create Portfolio object.
Input was generated by ent.
"""
input CreatePortfolioInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  description: String!
  returns: Float
  invested: Float
  userID: ID
  investmentIDs: [ID!]
}
"""
CreateRefreshTokenInput is used for create RefreshToken object.
Input was generated by ent.
"""
input CreateRefreshTokenInput {
  createdAt: Time!
  updatedAt: Time
  token: String!
  expiresAt: Time
  userID: ID
}
"""
CreateSentimentHistoryInput is used for create SentimentHistory object.
Input was generated by ent.
"""
input CreateSentimentHistoryInput {
  createdAt: Time
  updatedAt: Time
  stockID: UUID!
  sentiment: Float
}
"""
CreateStockFundamentalHistoryInput is used for create StockFundamentalHistory object.
Input was generated by ent.
"""
input CreateStockFundamentalHistoryInput {
  createdAt: Time
  updatedAt: Time
  stockID: String!
  exchange: StockFundamentalHistoryExchange!
  metadata: Map!
}
"""
CreateStockFundamentalInput is used for create StockFundamental object.
Input was generated by ent.
"""
input CreateStockFundamentalInput {
  createdAt: Time
  updatedAt: Time
  exchange: StockFundamentalExchange!
  metadata: Map!
  stockID: ID
}
"""
CreateStockInput is used for create Stock object.
Input was generated by ent.
"""
input CreateStockInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  description: String
  symbol: String!
  industry: String
  mcid: String!
  isinCode: String
  ttid: String
  sentiment: Float
  exchange: String
  transactionIDs: [ID!]
  boardMeetingIDs: [ID!]
  stockTechnicalIDs: [ID!]
  stockFundamentalIDs: [ID!]
  investmentIDs: [ID!]
}
"""
CreateStockTechnicalInput is used for create StockTechnical object.
Input was generated by ent.
"""
input CreateStockTechnicalInput {
  createdAt: Time
  updatedAt: Time
  sma5: Float
  sma10: Float
  sma20: Float
  sma50: Float
  sma100: Float
  sma200: Float
  closePrice: Float
  stockID: ID
}
"""
CreateTransactionInput is used for create Transaction object.
Input was generated by ent.
"""
input CreateTransactionInput {
  createdAt: Time
  updatedAt: Time
  amount: Float
  type: TransactionType
  description: String
  ownerID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  createdAt: Time
  updatedAt: Time
  username: String!
  password: String!
  email: String!
  isAdmin: Boolean
  balance: Float
  transactionIDs: [ID!]
  refreshTokenID: ID
  portfolioIDs: [ID!]
  investmentIDs: [ID!]
  notificationIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Investment implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  quantity: Float!
  averagePrice: Float!
  user: User
  stock: Stock
  portfolio: Portfolio
}
"""
InvestmentWhereInput is used for filtering Investment objects.
Input was generated by ent.
"""
input InvestmentWhereInput {
  not: InvestmentWhereInput
  and: [InvestmentWhereInput!]
  or: [InvestmentWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  quantity field predicates
  """
  quantity: Float
  quantityNEQ: Float
  quantityIn: [Float!]
  quantityNotIn: [Float!]
  quantityGT: Float
  quantityGTE: Float
  quantityLT: Float
  quantityLTE: Float
  """
  average_price field predicates
  """
  averagePrice: Float
  averagePriceNEQ: Float
  averagePriceIn: [Float!]
  averagePriceNotIn: [Float!]
  averagePriceGT: Float
  averagePriceGTE: Float
  averagePriceLT: Float
  averagePriceLTE: Float
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  stock edge predicates
  """
  hasStock: Boolean
  hasStockWith: [StockWhereInput!]
  """
  portfolio edge predicates
  """
  hasPortfolio: Boolean
  hasPortfolioWith: [PortfolioWhereInput!]
}
"""
The builtin Map type
"""
scalar Map
type News implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  publishedAt: Time!
  title: String!
  description: String!
  url: String!
  imageURL: String!
  content: String!
  source: String!
  stocks: [String!]!
  isAnalyzed: Boolean!
}
"""
NewsWhereInput is used for filtering News objects.
Input was generated by ent.
"""
input NewsWhereInput {
  not: NewsWhereInput
  and: [NewsWhereInput!]
  or: [NewsWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  published_at field predicates
  """
  publishedAt: Time
  publishedAtNEQ: Time
  publishedAtIn: [Time!]
  publishedAtNotIn: [Time!]
  publishedAtGT: Time
  publishedAtGTE: Time
  publishedAtLT: Time
  publishedAtLTE: Time
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  url field predicates
  """
  url: String
  urlNEQ: String
  urlIn: [String!]
  urlNotIn: [String!]
  urlGT: String
  urlGTE: String
  urlLT: String
  urlLTE: String
  urlContains: String
  urlHasPrefix: String
  urlHasSuffix: String
  urlEqualFold: String
  urlContainsFold: String
  """
  image_url field predicates
  """
  imageURL: String
  imageURLNEQ: String
  imageURLIn: [String!]
  imageURLNotIn: [String!]
  imageURLGT: String
  imageURLGTE: String
  imageURLLT: String
  imageURLLTE: String
  imageURLContains: String
  imageURLHasPrefix: String
  imageURLHasSuffix: String
  imageURLEqualFold: String
  imageURLContainsFold: String
  """
  content field predicates
  """
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentEqualFold: String
  contentContainsFold: String
  """
  source field predicates
  """
  source: String
  sourceNEQ: String
  sourceIn: [String!]
  sourceNotIn: [String!]
  sourceGT: String
  sourceGTE: String
  sourceLT: String
  sourceLTE: String
  sourceContains: String
  sourceHasPrefix: String
  sourceHasSuffix: String
  sourceEqualFold: String
  sourceContainsFold: String
  """
  is_analyzed field predicates
  """
  isAnalyzed: Boolean
  isAnalyzedNEQ: Boolean
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "stockyodha.com/mod/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
type Notification implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  title: String!
  description: String!
  isRead: Boolean!
  user: User
}
"""
NotificationWhereInput is used for filtering Notification objects.
Input was generated by ent.
"""
input NotificationWhereInput {
  not: NotificationWhereInput
  and: [NotificationWhereInput!]
  or: [NotificationWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  is_read field predicates
  """
  isRead: Boolean
  isReadNEQ: Boolean
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Portfolio implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  description: String!
  returns: Float!
  invested: Float!
  user: User
  investments: [Investment!]
}
"""
PortfolioWhereInput is used for filtering Portfolio objects.
Input was generated by ent.
"""
input PortfolioWhereInput {
  not: PortfolioWhereInput
  and: [PortfolioWhereInput!]
  or: [PortfolioWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  returns field predicates
  """
  returns: Float
  returnsNEQ: Float
  returnsIn: [Float!]
  returnsNotIn: [Float!]
  returnsGT: Float
  returnsGTE: Float
  returnsLT: Float
  returnsLTE: Float
  """
  invested field predicates
  """
  invested: Float
  investedNEQ: Float
  investedIn: [Float!]
  investedNotIn: [Float!]
  investedGT: Float
  investedGTE: Float
  investedLT: Float
  investedLTE: Float
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """
  investments edge predicates
  """
  hasInvestments: Boolean
  hasInvestmentsWith: [InvestmentWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  newsSlice: [News!]!
  notifications: [Notification!]!
  portfolios: [Portfolio!]!
  refreshTokens: [RefreshToken!]!
  stocks: [Stock!]!
  transactions: [Transaction!]!
  users: [User!]!
}
type RefreshToken implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  token: String!
  expiresAt: Time!
  user: User
}
"""
RefreshTokenWhereInput is used for filtering RefreshToken objects.
Input was generated by ent.
"""
input RefreshTokenWhereInput {
  not: RefreshTokenWhereInput
  and: [RefreshTokenWhereInput!]
  or: [RefreshTokenWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  token field predicates
  """
  token: String
  tokenNEQ: String
  tokenIn: [String!]
  tokenNotIn: [String!]
  tokenGT: String
  tokenGTE: String
  tokenLT: String
  tokenLTE: String
  tokenContains: String
  tokenHasPrefix: String
  tokenHasSuffix: String
  tokenEqualFold: String
  tokenContainsFold: String
  """
  expires_at field predicates
  """
  expiresAt: Time
  expiresAtNEQ: Time
  expiresAtIn: [Time!]
  expiresAtNotIn: [Time!]
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtLT: Time
  expiresAtLTE: Time
  """
  user edge predicates
  """
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
type SentimentHistory implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  stockID: UUID!
  sentiment: Float!
}
"""
SentimentHistoryWhereInput is used for filtering SentimentHistory objects.
Input was generated by ent.
"""
input SentimentHistoryWhereInput {
  not: SentimentHistoryWhereInput
  and: [SentimentHistoryWhereInput!]
  or: [SentimentHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  stock_id field predicates
  """
  stockID: UUID
  stockIDNEQ: UUID
  stockIDIn: [UUID!]
  stockIDNotIn: [UUID!]
  stockIDGT: UUID
  stockIDGTE: UUID
  stockIDLT: UUID
  stockIDLTE: UUID
  """
  sentiment field predicates
  """
  sentiment: Float
  sentimentNEQ: Float
  sentimentIn: [Float!]
  sentimentNotIn: [Float!]
  sentimentGT: Float
  sentimentGTE: Float
  sentimentLT: Float
  sentimentLTE: Float
}
type Stock implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  description: String!
  symbol: String!
  industry: String!
  mcid: String!
  isinCode: String
  ttid: String!
  sentiment: Float!
  exchange: String!
  transactions: [Transaction!]
  boardMeetings: [BoardMeeting!]
  stockTechnicals: [StockTechnical!]
  stockFundamental: [StockFundamental!]
  investments: [Investment!]
}
type StockFundamental implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  exchange: StockFundamentalExchange!
  metadata: Map!
  stock: Stock
}
"""
StockFundamentalExchange is enum for the field exchange
"""
enum StockFundamentalExchange @goModel(model: "stockyodha.com/mod/ent/stockfundamental.Exchange") {
  NSE
  BSE
}
type StockFundamentalHistory implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  stockID: String!
  exchange: StockFundamentalHistoryExchange!
  metadata: Map!
}
"""
StockFundamentalHistoryExchange is enum for the field exchange
"""
enum StockFundamentalHistoryExchange @goModel(model: "stockyodha.com/mod/ent/stockfundamentalhistory.Exchange") {
  NSE
  BSE
}
"""
StockFundamentalHistoryWhereInput is used for filtering StockFundamentalHistory objects.
Input was generated by ent.
"""
input StockFundamentalHistoryWhereInput {
  not: StockFundamentalHistoryWhereInput
  and: [StockFundamentalHistoryWhereInput!]
  or: [StockFundamentalHistoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  stock_id field predicates
  """
  stockID: String
  stockIDNEQ: String
  stockIDIn: [String!]
  stockIDNotIn: [String!]
  stockIDGT: String
  stockIDGTE: String
  stockIDLT: String
  stockIDLTE: String
  stockIDContains: String
  stockIDHasPrefix: String
  stockIDHasSuffix: String
  stockIDEqualFold: String
  stockIDContainsFold: String
  """
  exchange field predicates
  """
  exchange: StockFundamentalHistoryExchange
  exchangeNEQ: StockFundamentalHistoryExchange
  exchangeIn: [StockFundamentalHistoryExchange!]
  exchangeNotIn: [StockFundamentalHistoryExchange!]
}
"""
StockFundamentalWhereInput is used for filtering StockFundamental objects.
Input was generated by ent.
"""
input StockFundamentalWhereInput {
  not: StockFundamentalWhereInput
  and: [StockFundamentalWhereInput!]
  or: [StockFundamentalWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  exchange field predicates
  """
  exchange: StockFundamentalExchange
  exchangeNEQ: StockFundamentalExchange
  exchangeIn: [StockFundamentalExchange!]
  exchangeNotIn: [StockFundamentalExchange!]
  """
  stock edge predicates
  """
  hasStock: Boolean
  hasStockWith: [StockWhereInput!]
}
type StockTechnical implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  sma5: Float!
  sma10: Float!
  sma20: Float!
  sma50: Float!
  sma100: Float!
  sma200: Float!
  closePrice: Float!
  stock: Stock
}
"""
StockTechnicalWhereInput is used for filtering StockTechnical objects.
Input was generated by ent.
"""
input StockTechnicalWhereInput {
  not: StockTechnicalWhereInput
  and: [StockTechnicalWhereInput!]
  or: [StockTechnicalWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  sma5 field predicates
  """
  sma5: Float
  sma5NEQ: Float
  sma5In: [Float!]
  sma5NotIn: [Float!]
  sma5GT: Float
  sma5GTE: Float
  sma5LT: Float
  sma5LTE: Float
  """
  sma10 field predicates
  """
  sma10: Float
  sma10NEQ: Float
  sma10In: [Float!]
  sma10NotIn: [Float!]
  sma10GT: Float
  sma10GTE: Float
  sma10LT: Float
  sma10LTE: Float
  """
  sma20 field predicates
  """
  sma20: Float
  sma20NEQ: Float
  sma20In: [Float!]
  sma20NotIn: [Float!]
  sma20GT: Float
  sma20GTE: Float
  sma20LT: Float
  sma20LTE: Float
  """
  sma50 field predicates
  """
  sma50: Float
  sma50NEQ: Float
  sma50In: [Float!]
  sma50NotIn: [Float!]
  sma50GT: Float
  sma50GTE: Float
  sma50LT: Float
  sma50LTE: Float
  """
  sma100 field predicates
  """
  sma100: Float
  sma100NEQ: Float
  sma100In: [Float!]
  sma100NotIn: [Float!]
  sma100GT: Float
  sma100GTE: Float
  sma100LT: Float
  sma100LTE: Float
  """
  sma200 field predicates
  """
  sma200: Float
  sma200NEQ: Float
  sma200In: [Float!]
  sma200NotIn: [Float!]
  sma200GT: Float
  sma200GTE: Float
  sma200LT: Float
  sma200LTE: Float
  """
  close_price field predicates
  """
  closePrice: Float
  closePriceNEQ: Float
  closePriceIn: [Float!]
  closePriceNotIn: [Float!]
  closePriceGT: Float
  closePriceGTE: Float
  closePriceLT: Float
  closePriceLTE: Float
  """
  stock edge predicates
  """
  hasStock: Boolean
  hasStockWith: [StockWhereInput!]
}
"""
StockWhereInput is used for filtering Stock objects.
Input was generated by ent.
"""
input StockWhereInput {
  not: StockWhereInput
  and: [StockWhereInput!]
  or: [StockWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  symbol field predicates
  """
  symbol: String
  symbolNEQ: String
  symbolIn: [String!]
  symbolNotIn: [String!]
  symbolGT: String
  symbolGTE: String
  symbolLT: String
  symbolLTE: String
  symbolContains: String
  symbolHasPrefix: String
  symbolHasSuffix: String
  symbolEqualFold: String
  symbolContainsFold: String
  """
  industry field predicates
  """
  industry: String
  industryNEQ: String
  industryIn: [String!]
  industryNotIn: [String!]
  industryGT: String
  industryGTE: String
  industryLT: String
  industryLTE: String
  industryContains: String
  industryHasPrefix: String
  industryHasSuffix: String
  industryEqualFold: String
  industryContainsFold: String
  """
  mcid field predicates
  """
  mcid: String
  mcidNEQ: String
  mcidIn: [String!]
  mcidNotIn: [String!]
  mcidGT: String
  mcidGTE: String
  mcidLT: String
  mcidLTE: String
  mcidContains: String
  mcidHasPrefix: String
  mcidHasSuffix: String
  mcidEqualFold: String
  mcidContainsFold: String
  """
  isin_code field predicates
  """
  isinCode: String
  isinCodeNEQ: String
  isinCodeIn: [String!]
  isinCodeNotIn: [String!]
  isinCodeGT: String
  isinCodeGTE: String
  isinCodeLT: String
  isinCodeLTE: String
  isinCodeContains: String
  isinCodeHasPrefix: String
  isinCodeHasSuffix: String
  isinCodeIsNil: Boolean
  isinCodeNotNil: Boolean
  isinCodeEqualFold: String
  isinCodeContainsFold: String
  """
  ttid field predicates
  """
  ttid: String
  ttidNEQ: String
  ttidIn: [String!]
  ttidNotIn: [String!]
  ttidGT: String
  ttidGTE: String
  ttidLT: String
  ttidLTE: String
  ttidContains: String
  ttidHasPrefix: String
  ttidHasSuffix: String
  ttidEqualFold: String
  ttidContainsFold: String
  """
  sentiment field predicates
  """
  sentiment: Float
  sentimentNEQ: Float
  sentimentIn: [Float!]
  sentimentNotIn: [Float!]
  sentimentGT: Float
  sentimentGTE: Float
  sentimentLT: Float
  sentimentLTE: Float
  """
  exchange field predicates
  """
  exchange: String
  exchangeNEQ: String
  exchangeIn: [String!]
  exchangeNotIn: [String!]
  exchangeGT: String
  exchangeGTE: String
  exchangeLT: String
  exchangeLTE: String
  exchangeContains: String
  exchangeHasPrefix: String
  exchangeHasSuffix: String
  exchangeEqualFold: String
  exchangeContainsFold: String
  """
  transactions edge predicates
  """
  hasTransactions: Boolean
  hasTransactionsWith: [TransactionWhereInput!]
  """
  board_meetings edge predicates
  """
  hasBoardMeetings: Boolean
  hasBoardMeetingsWith: [BoardMeetingWhereInput!]
  """
  stock_technicals edge predicates
  """
  hasStockTechnicals: Boolean
  hasStockTechnicalsWith: [StockTechnicalWhereInput!]
  """
  stock_fundamental edge predicates
  """
  hasStockFundamental: Boolean
  hasStockFundamentalWith: [StockFundamentalWhereInput!]
  """
  investments edge predicates
  """
  hasInvestments: Boolean
  hasInvestmentsWith: [InvestmentWhereInput!]
}
"""
The builtin Time type
"""
scalar Time
type Transaction implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  amount: Float!
  type: TransactionType!
  description: String!
  owner: User
}
"""
TransactionType is enum for the field type
"""
enum TransactionType @goModel(model: "stockyodha.com/mod/ent/transaction.Type") {
  debit
  credit
}
"""
TransactionWhereInput is used for filtering Transaction objects.
Input was generated by ent.
"""
input TransactionWhereInput {
  not: TransactionWhereInput
  and: [TransactionWhereInput!]
  or: [TransactionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  amount field predicates
  """
  amount: Float
  amountNEQ: Float
  amountIn: [Float!]
  amountNotIn: [Float!]
  amountGT: Float
  amountGTE: Float
  amountLT: Float
  amountLTE: Float
  """
  type field predicates
  """
  type: TransactionType
  typeNEQ: TransactionType
  typeIn: [TransactionType!]
  typeNotIn: [TransactionType!]
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  owner edge predicates
  """
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
}
"""
UpdateBoardMeetingInput is used for update BoardMeeting object.
Input was generated by ent.
"""
input UpdateBoardMeetingInput {
  createdAt: Time
  updatedAt: Time
  meetingDate: Time
  announcementDate: Time
  purpose: String
  description: String
  attachment: String
  stockID: ID
  clearStock: Boolean
}
"""
UpdateSentimentHistoryInput is used for update SentimentHistory object.
Input was generated by ent.
"""
input UpdateSentimentHistoryInput {
  createdAt: Time
  updatedAt: Time
  stockID: UUID
  sentiment: Float
}
"""
UpdateStockFundamentalHistoryInput is used for update StockFundamentalHistory object.
Input was generated by ent.
"""
input UpdateStockFundamentalHistoryInput {
  createdAt: Time
  updatedAt: Time
  stockID: String
  exchange: StockFundamentalHistoryExchange
  metadata: Map
}
"""
UpdateStockFundamentalInput is used for update StockFundamental object.
Input was generated by ent.
"""
input UpdateStockFundamentalInput {
  createdAt: Time
  updatedAt: Time
  exchange: StockFundamentalExchange
  metadata: Map
  stockID: ID
  clearStock: Boolean
}
"""
UpdateStockTechnicalInput is used for update StockTechnical object.
Input was generated by ent.
"""
input UpdateStockTechnicalInput {
  createdAt: Time
  updatedAt: Time
  sma5: Float
  sma10: Float
  sma20: Float
  sma50: Float
  sma100: Float
  sma200: Float
  closePrice: Float
  stockID: ID
  clearStock: Boolean
}
type User implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  username: String!
  email: String!
  isAdmin: Boolean!
  balance: Float!
  transactions: [Transaction!]
  refreshToken: RefreshToken
  portfolios: [Portfolio!]
  investments: [Investment!]
  notifications: [Notification!]
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """
  username field predicates
  """
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameEqualFold: String
  usernameContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  is_admin field predicates
  """
  isAdmin: Boolean
  isAdminNEQ: Boolean
  """
  balance field predicates
  """
  balance: Float
  balanceNEQ: Float
  balanceIn: [Float!]
  balanceNotIn: [Float!]
  balanceGT: Float
  balanceGTE: Float
  balanceLT: Float
  balanceLTE: Float
  """
  transactions edge predicates
  """
  hasTransactions: Boolean
  hasTransactionsWith: [TransactionWhereInput!]
  """
  refresh_token edge predicates
  """
  hasRefreshToken: Boolean
  hasRefreshTokenWith: [RefreshTokenWhereInput!]
  """
  portfolios edge predicates
  """
  hasPortfolios: Boolean
  hasPortfoliosWith: [PortfolioWhereInput!]
  """
  investments edge predicates
  """
  hasInvestments: Boolean
  hasInvestmentsWith: [InvestmentWhereInput!]
  """
  notifications edge predicates
  """
  hasNotifications: Boolean
  hasNotificationsWith: [NotificationWhereInput!]
}

directive @auth on FIELD_DEFINITION
# Define a custom scalar type UUID
scalar UUID
# Mutation to register user
type RegisterPayload {
  user: User!
  token: String!
  refreshToken: String!
}

input RegisterInput {
  username: String!
  password: String!
  email: String!
}

input NewsInput {
  title: String!
  description: String!
  url: String!
  urlToImage: String!
  publishedAt: String!
  content: String!
  stock: [String!]!
}

type LoginPayload {
  user: User!
  token: String!
  refreshToken: String!
}

type PortfolioResponse {
  portfolio: Portfolio!
  investment: Float!
  return: Float!
  returnPercentage: Float!
}

type StockMarketData {
  Symbol: String!
  CompanyName: String!
  Change: Float!
  Close: Float!
  PercentChange: Float!
}

type TopLosersGainers {
  GainersNse: [StockMarketData!]!
  GainersBse: [StockMarketData!]!
  LosersNse: [StockMarketData!]!
  LosersBse: [StockMarketData!]!
}

type Mutation {
  register(input: RegisterInput!): RegisterPayload!
  addNews(input: NewsInput!): News! @auth
}

extend type Query {
  me: User! @auth
  login(username: String!, password: String!): LoginPayload!
  stock(symbol: String!): [Stock]! @auth
  stocksBySentiment(limit: Int, offset: Int, orderType: String): [Stock!]! @auth
  priceByStockId(stockId: String!): Float! @auth
  news(limit: Int, offset: Int, orderType: String, orderOn: String): [News!]!
    @auth
  newsById(id: String!): News! @auth
  portfoliosByUser(userId: String!): [PortfolioResponse!]! @auth
  topLosersGainers(limit: Int): TopLosersGainers! @auth
}
